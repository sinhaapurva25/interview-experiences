array image [m][n]={{{R=r00,G=g00,B=b00},{R=r10,G=g10,B=b10},..{R=rmn,G=gmn,B=bmn}}}; //input image
int scale_x sx, scale_y sy, sampling method; //inputs for sampling

array int linear_scaled_image [(m*sx)][(n*sy)]={{{R=r00,G=g00,B=b00},{R=r10,G=g10,B=b10},..{R=rmn,G=gmn,B=bmn}}}; //create linear_scaled_image
array int bilinear_scaled_image [(m*sx)][(n*sy)]={{{R=r00,G=g00,B=b00},{R=r10,G=g10,B=b10},..{R=rmn,G=gmn,B=bmn}}}; //create bilinear_scaled_image
array int gaussian_scaled_image [(m*sx)][(n*sy)]={{{R=r00,G=g00,B=b00},{R=r10,G=g10,B=b10},..{R=rmn,G=gmn,B=bmn}}}; //gaussian_scaled_image

int p=0;
for (int j=0; j<n*sy; i++)
	{
		q=0;
		for (int i=0; i<n*sx; i++)
			{
				linear_scaled_image [i][j]= image [3*a+1][3*b+1];
//every pixel in the smaller image is filled with every third pixel from the original image, this is an example of replication; since the scale factor is less than 0, the image scaled image is smaller than the original image

				bilinear_scaled_image[i][j]= image [a-1][b-1] + image [a+1][b-1]*i + image [a-1][b+1]*j + image [a+1][b+1]*i*j;
//image pixel is filled with four corner pixels by interpolation; note: the border pixels will take up 0 when no corners are found

//Gaussian kernel is assumed to be a 3*3 matrix of {{1/16,2/16,1/16},{2/16,4/16,2/16},{1/16,2/16,1/16}}; kernel convolution of the pixel leaving every three pixels
	

 				a++;
			}
	b++;
	}